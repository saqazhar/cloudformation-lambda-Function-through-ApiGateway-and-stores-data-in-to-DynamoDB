Resources:
  apiGateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "my-api"
      Description: "My API"
  apiGatewayRootMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "POST"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !ImportValue PutLambdaArn
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates: {"application/json": ""}
      MethodResponses:
        - StatusCode: 200
          ResponseModels:  { "application/json": "Empty" }
      ResourceId: !GetAtt ["apiGateway", "RootResourceId"]
      RestApiId: !Ref "apiGateway"




  DELETEMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "DELETE"      
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !ImportValue DeleteLambdaArn
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates: {"application/json": ""}        
        RequestTemplates: 
          application/json: "{\"custId\": \"$input.params('customerId')\" }"
      MethodResponses:
        - StatusCode: 200
          ResponseModels:  { "application/json": "Empty" }
      RequestParameters: 
        method.request.querystring.customerId: true   
      # RequestParameters: 
      #   Name : customerId
      ResourceId: !GetAtt ["apiGateway", "RootResourceId"]
      RestApiId: !Ref "apiGateway"      


  GetMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "GET"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !ImportValue GetLambdaArn
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates: {"application/json": ""}        
        RequestTemplates: 
          application/json: "{\"custId\": \"$input.params('customerId')\" }"
      MethodResponses:
        - StatusCode: 200
          ResponseModels:  { "application/json": "Empty" }      
      RequestParameters: 
        method.request.querystring.customerId: true      
      ResourceId: !GetAtt ["apiGateway", "RootResourceId"]
      RestApiId: !Ref "apiGateway"

  lambdaApiGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !ImportValue PutLambdaArn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/POST/"

  lambdaApiGatewayInvokeGET:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !ImportValue GetLambdaArn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/GET/"

  lambdaApiGatewayInvokeDELETE:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !ImportValue DeleteLambdaArn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/DELETE/"


  ApiGatewayAccount: 
    Type : 'AWS::ApiGateway::Account'
    Properties: 
      CloudWatchRoleArn: arn:aws:iam::853219876644:role/apiGatewayCloudWatchLogs
